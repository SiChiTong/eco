// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eco {
namespace service {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GetServiceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceAddressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceAddressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubServiceAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubServiceAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubServiceAddressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubServiceAddressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubServiceAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubServiceAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubServiceAddressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubServiceAddressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnPubServiceAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnPubServiceAddress_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Service_2eproto() {
  protobuf_AddDesc_Service_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Service.proto");
  GOOGLE_CHECK(file != NULL);
  GetServiceReq_descriptor_ = file->message_type(0);
  static const int GetServiceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceReq, service_name_),
  };
  GetServiceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceReq_descriptor_,
      GetServiceReq::default_instance_,
      GetServiceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceReq));
  Service_descriptor_ = file->message_type(1);
  static const int Service_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, did_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, max_future_object_workload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, max_limited_object_workload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, virtual_service_object_workload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, horizontal_virtual_service_number_),
  };
  Service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Service));
  GetServiceAddressReq_descriptor_ = file->message_type(2);
  static const int GetServiceAddressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressReq, service_name_),
  };
  GetServiceAddressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceAddressReq_descriptor_,
      GetServiceAddressReq::default_instance_,
      GetServiceAddressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceAddressReq));
  GetServiceAddressRsp_descriptor_ = file->message_type(3);
  static const int GetServiceAddressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressRsp, service_name_),
  };
  GetServiceAddressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceAddressRsp_descriptor_,
      GetServiceAddressRsp::default_instance_,
      GetServiceAddressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAddressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceAddressRsp));
  SubServiceAddressReq_descriptor_ = file->message_type(4);
  static const int SubServiceAddressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressReq, service_name_),
  };
  SubServiceAddressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubServiceAddressReq_descriptor_,
      SubServiceAddressReq::default_instance_,
      SubServiceAddressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubServiceAddressReq));
  SubServiceAddressRsp_descriptor_ = file->message_type(5);
  static const int SubServiceAddressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressRsp, service_name_),
  };
  SubServiceAddressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubServiceAddressRsp_descriptor_,
      SubServiceAddressRsp::default_instance_,
      SubServiceAddressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubServiceAddressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubServiceAddressRsp));
  PubServiceAddressReq_descriptor_ = file->message_type(6);
  static const int PubServiceAddressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressReq, service_name_),
  };
  PubServiceAddressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubServiceAddressReq_descriptor_,
      PubServiceAddressReq::default_instance_,
      PubServiceAddressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubServiceAddressReq));
  PubServiceAddressRsp_descriptor_ = file->message_type(7);
  static const int PubServiceAddressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressRsp, service_name_),
  };
  PubServiceAddressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubServiceAddressRsp_descriptor_,
      PubServiceAddressRsp::default_instance_,
      PubServiceAddressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubServiceAddressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubServiceAddressRsp));
  OnPubServiceAddress_descriptor_ = file->message_type(8);
  static const int OnPubServiceAddress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnPubServiceAddress, service_name_),
  };
  OnPubServiceAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnPubServiceAddress_descriptor_,
      OnPubServiceAddress::default_instance_,
      OnPubServiceAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnPubServiceAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnPubServiceAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnPubServiceAddress));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Service_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceReq_descriptor_, &GetServiceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Service_descriptor_, &Service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceAddressReq_descriptor_, &GetServiceAddressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceAddressRsp_descriptor_, &GetServiceAddressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubServiceAddressReq_descriptor_, &SubServiceAddressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubServiceAddressRsp_descriptor_, &SubServiceAddressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubServiceAddressReq_descriptor_, &PubServiceAddressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubServiceAddressRsp_descriptor_, &PubServiceAddressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnPubServiceAddress_descriptor_, &OnPubServiceAddress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Service_2eproto() {
  delete GetServiceReq::default_instance_;
  delete GetServiceReq_reflection_;
  delete Service::default_instance_;
  delete Service_reflection_;
  delete GetServiceAddressReq::default_instance_;
  delete GetServiceAddressReq_reflection_;
  delete GetServiceAddressRsp::default_instance_;
  delete GetServiceAddressRsp_reflection_;
  delete SubServiceAddressReq::default_instance_;
  delete SubServiceAddressReq_reflection_;
  delete SubServiceAddressRsp::default_instance_;
  delete SubServiceAddressRsp_reflection_;
  delete PubServiceAddressReq::default_instance_;
  delete PubServiceAddressReq_reflection_;
  delete PubServiceAddressRsp::default_instance_;
  delete PubServiceAddressRsp_reflection_;
  delete OnPubServiceAddress::default_instance_;
  delete OnPubServiceAddress_reflection_;
}

void protobuf_AddDesc_Service_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eco::service::proto::protobuf_AddDesc_Error_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rService.proto\022\021eco.service.proto\032\013Erro"
    "r.proto\"%\n\rGetServiceReq\022\024\n\014service_name"
    "\030\n \001(\t\"\246\002\n\007Service\022\'\n\005error\030\002 \001(\0132\030.eco."
    "service.proto.Error\022\024\n\014service_name\030\n \001("
    "\t\022\024\n\014process_name\030\013 \001(\t\022\024\n\014did_protocol\030"
    "\014 \001(\t\022\023\n\013object_name\030\r \001(\t\022\"\n\032max_future"
    "_object_workload\030\016 \001(\003\022#\n\033max_limited_ob"
    "ject_workload\030\017 \001(\003\022\'\n\037virtual_service_o"
    "bject_workload\030\020 \001(\005\022)\n!horizontal_virtu"
    "al_service_number\030\021 \001(\005\",\n\024GetServiceAdd"
    "ressReq\022\024\n\014service_name\030\n \001(\t\"U\n\024GetServ"
    "iceAddressRsp\022\'\n\005error\030\002 \001(\0132\030.eco.servi"
    "ce.proto.Error\022\024\n\014service_name\030\n \001(\t\",\n\024"
    "SubServiceAddressReq\022\024\n\014service_name\030\n \001"
    "(\t\"U\n\024SubServiceAddressRsp\022\'\n\005error\030\002 \001("
    "\0132\030.eco.service.proto.Error\022\024\n\014service_n"
    "ame\030\n \001(\t\",\n\024PubServiceAddressReq\022\024\n\014ser"
    "vice_name\030\n \001(\t\"U\n\024PubServiceAddressRsp\022"
    "\'\n\005error\030\002 \001(\0132\030.eco.service.proto.Error"
    "\022\024\n\014service_name\030\n \001(\t\"+\n\023OnPubServiceAd"
    "dress\022\024\n\014service_name\030\n \001(\t", 827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Service.proto", &protobuf_RegisterTypes);
  GetServiceReq::default_instance_ = new GetServiceReq();
  Service::default_instance_ = new Service();
  GetServiceAddressReq::default_instance_ = new GetServiceAddressReq();
  GetServiceAddressRsp::default_instance_ = new GetServiceAddressRsp();
  SubServiceAddressReq::default_instance_ = new SubServiceAddressReq();
  SubServiceAddressRsp::default_instance_ = new SubServiceAddressRsp();
  PubServiceAddressReq::default_instance_ = new PubServiceAddressReq();
  PubServiceAddressRsp::default_instance_ = new PubServiceAddressRsp();
  OnPubServiceAddress::default_instance_ = new OnPubServiceAddress();
  GetServiceReq::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  GetServiceAddressReq::default_instance_->InitAsDefaultInstance();
  GetServiceAddressRsp::default_instance_->InitAsDefaultInstance();
  SubServiceAddressReq::default_instance_->InitAsDefaultInstance();
  SubServiceAddressRsp::default_instance_->InitAsDefaultInstance();
  PubServiceAddressReq::default_instance_->InitAsDefaultInstance();
  PubServiceAddressRsp::default_instance_->InitAsDefaultInstance();
  OnPubServiceAddress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Service_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Service_2eproto {
  StaticDescriptorInitializer_Service_2eproto() {
    protobuf_AddDesc_Service_2eproto();
  }
} static_descriptor_initializer_Service_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetServiceReq::kServiceNameFieldNumber;
#endif  // !_MSC_VER

GetServiceReq::GetServiceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.GetServiceReq)
}

void GetServiceReq::InitAsDefaultInstance() {
}

GetServiceReq::GetServiceReq(const GetServiceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.GetServiceReq)
}

void GetServiceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceReq::~GetServiceReq() {
  // @@protoc_insertion_point(destructor:eco.service.proto.GetServiceReq)
  SharedDtor();
}

void GetServiceReq::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void GetServiceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceReq_descriptor_;
}

const GetServiceReq& GetServiceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

GetServiceReq* GetServiceReq::default_instance_ = NULL;

GetServiceReq* GetServiceReq::New() const {
  return new GetServiceReq;
}

void GetServiceReq::Clear() {
  if (has_service_name()) {
    if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      service_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.GetServiceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.GetServiceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.GetServiceReq)
  return false;
#undef DO_
}

void GetServiceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.GetServiceReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.GetServiceReq)
}

::google::protobuf::uint8* GetServiceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.GetServiceReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.GetServiceReq)
  return target;
}

int GetServiceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceReq::MergeFrom(const GetServiceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceReq::CopyFrom(const GetServiceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceReq::IsInitialized() const {

  return true;
}

void GetServiceReq::Swap(GetServiceReq* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceReq_descriptor_;
  metadata.reflection = GetServiceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Service::kErrorFieldNumber;
const int Service::kServiceNameFieldNumber;
const int Service::kProcessNameFieldNumber;
const int Service::kDidProtocolFieldNumber;
const int Service::kObjectNameFieldNumber;
const int Service::kMaxFutureObjectWorkloadFieldNumber;
const int Service::kMaxLimitedObjectWorkloadFieldNumber;
const int Service::kVirtualServiceObjectWorkloadFieldNumber;
const int Service::kHorizontalVirtualServiceNumberFieldNumber;
#endif  // !_MSC_VER

Service::Service()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.Service)
}

void Service::InitAsDefaultInstance() {
  error_ = const_cast< ::eco::service::proto::Error*>(&::eco::service::proto::Error::default_instance());
}

Service::Service(const Service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.Service)
}

void Service::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_future_object_workload_ = GOOGLE_LONGLONG(0);
  max_limited_object_workload_ = GOOGLE_LONGLONG(0);
  virtual_service_object_workload_ = 0;
  horizontal_virtual_service_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:eco.service.proto.Service)
  SharedDtor();
}

void Service::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (process_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_name_;
  }
  if (did_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete did_protocol_;
  }
  if (object_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete object_name_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New() const {
  return new Service;
}

void Service::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Service*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_future_object_workload_, virtual_service_object_workload_);
    if (has_error()) {
      if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        process_name_->clear();
      }
    }
    if (has_did_protocol()) {
      if (did_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        did_protocol_->clear();
      }
    }
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        object_name_->clear();
      }
    }
  }
  horizontal_virtual_service_number_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eco.service.proto.Error error = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_service_name;
        break;
      }

      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_process_name;
        break;
      }

      // optional string process_name = 11;
      case 11: {
        if (tag == 90) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "process_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_did_protocol;
        break;
      }

      // optional string did_protocol = 12;
      case 12: {
        if (tag == 98) {
         parse_did_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->did_protocol().data(), this->did_protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "did_protocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_object_name;
        break;
      }

      // optional string object_name = 13;
      case 13: {
        if (tag == 106) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_max_future_object_workload;
        break;
      }

      // optional int64 max_future_object_workload = 14;
      case 14: {
        if (tag == 112) {
         parse_max_future_object_workload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_future_object_workload_)));
          set_has_max_future_object_workload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_max_limited_object_workload;
        break;
      }

      // optional int64 max_limited_object_workload = 15;
      case 15: {
        if (tag == 120) {
         parse_max_limited_object_workload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_limited_object_workload_)));
          set_has_max_limited_object_workload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_virtual_service_object_workload;
        break;
      }

      // optional int32 virtual_service_object_workload = 16;
      case 16: {
        if (tag == 128) {
         parse_virtual_service_object_workload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtual_service_object_workload_)));
          set_has_virtual_service_object_workload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_horizontal_virtual_service_number;
        break;
      }

      // optional int32 horizontal_virtual_service_number = 17;
      case 17: {
        if (tag == 136) {
         parse_horizontal_virtual_service_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_virtual_service_number_)));
          set_has_horizontal_virtual_service_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.Service)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  // optional string process_name = 11;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->process_name(), output);
  }

  // optional string did_protocol = 12;
  if (has_did_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did_protocol().data(), this->did_protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "did_protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->did_protocol(), output);
  }

  // optional string object_name = 13;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->object_name(), output);
  }

  // optional int64 max_future_object_workload = 14;
  if (has_max_future_object_workload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->max_future_object_workload(), output);
  }

  // optional int64 max_limited_object_workload = 15;
  if (has_max_limited_object_workload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->max_limited_object_workload(), output);
  }

  // optional int32 virtual_service_object_workload = 16;
  if (has_virtual_service_object_workload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->virtual_service_object_workload(), output);
  }

  // optional int32 horizontal_virtual_service_number = 17;
  if (has_horizontal_virtual_service_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->horizontal_virtual_service_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.Service)
}

::google::protobuf::uint8* Service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.Service)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  // optional string process_name = 11;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->process_name(), target);
  }

  // optional string did_protocol = 12;
  if (has_did_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did_protocol().data(), this->did_protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "did_protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->did_protocol(), target);
  }

  // optional string object_name = 13;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->object_name(), target);
  }

  // optional int64 max_future_object_workload = 14;
  if (has_max_future_object_workload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->max_future_object_workload(), target);
  }

  // optional int64 max_limited_object_workload = 15;
  if (has_max_limited_object_workload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->max_limited_object_workload(), target);
  }

  // optional int32 virtual_service_object_workload = 16;
  if (has_virtual_service_object_workload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->virtual_service_object_workload(), target);
  }

  // optional int32 horizontal_virtual_service_number = 17;
  if (has_horizontal_virtual_service_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->horizontal_virtual_service_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.Service)
  return target;
}

int Service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eco.service.proto.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional string process_name = 11;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional string did_protocol = 12;
    if (has_did_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did_protocol());
    }

    // optional string object_name = 13;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }

    // optional int64 max_future_object_workload = 14;
    if (has_max_future_object_workload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_future_object_workload());
    }

    // optional int64 max_limited_object_workload = 15;
    if (has_max_limited_object_workload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_limited_object_workload());
    }

    // optional int32 virtual_service_object_workload = 16;
    if (has_virtual_service_object_workload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtual_service_object_workload());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 horizontal_virtual_service_number = 17;
    if (has_horizontal_virtual_service_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_virtual_service_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::eco::service::proto::Error::MergeFrom(from.error());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
    if (from.has_did_protocol()) {
      set_did_protocol(from.did_protocol());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_max_future_object_workload()) {
      set_max_future_object_workload(from.max_future_object_workload());
    }
    if (from.has_max_limited_object_workload()) {
      set_max_limited_object_workload(from.max_limited_object_workload());
    }
    if (from.has_virtual_service_object_workload()) {
      set_virtual_service_object_workload(from.virtual_service_object_workload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_horizontal_virtual_service_number()) {
      set_horizontal_virtual_service_number(from.horizontal_virtual_service_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {

  return true;
}

void Service::Swap(Service* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(service_name_, other->service_name_);
    std::swap(process_name_, other->process_name_);
    std::swap(did_protocol_, other->did_protocol_);
    std::swap(object_name_, other->object_name_);
    std::swap(max_future_object_workload_, other->max_future_object_workload_);
    std::swap(max_limited_object_workload_, other->max_limited_object_workload_);
    std::swap(virtual_service_object_workload_, other->virtual_service_object_workload_);
    std::swap(horizontal_virtual_service_number_, other->horizontal_virtual_service_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceAddressReq::kServiceNameFieldNumber;
#endif  // !_MSC_VER

GetServiceAddressReq::GetServiceAddressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.GetServiceAddressReq)
}

void GetServiceAddressReq::InitAsDefaultInstance() {
}

GetServiceAddressReq::GetServiceAddressReq(const GetServiceAddressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.GetServiceAddressReq)
}

void GetServiceAddressReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceAddressReq::~GetServiceAddressReq() {
  // @@protoc_insertion_point(destructor:eco.service.proto.GetServiceAddressReq)
  SharedDtor();
}

void GetServiceAddressReq::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void GetServiceAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceAddressReq_descriptor_;
}

const GetServiceAddressReq& GetServiceAddressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

GetServiceAddressReq* GetServiceAddressReq::default_instance_ = NULL;

GetServiceAddressReq* GetServiceAddressReq::New() const {
  return new GetServiceAddressReq;
}

void GetServiceAddressReq::Clear() {
  if (has_service_name()) {
    if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      service_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.GetServiceAddressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.GetServiceAddressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.GetServiceAddressReq)
  return false;
#undef DO_
}

void GetServiceAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.GetServiceAddressReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.GetServiceAddressReq)
}

::google::protobuf::uint8* GetServiceAddressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.GetServiceAddressReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.GetServiceAddressReq)
  return target;
}

int GetServiceAddressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceAddressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceAddressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceAddressReq::MergeFrom(const GetServiceAddressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceAddressReq::CopyFrom(const GetServiceAddressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceAddressReq::IsInitialized() const {

  return true;
}

void GetServiceAddressReq::Swap(GetServiceAddressReq* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceAddressReq_descriptor_;
  metadata.reflection = GetServiceAddressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceAddressRsp::kErrorFieldNumber;
const int GetServiceAddressRsp::kServiceNameFieldNumber;
#endif  // !_MSC_VER

GetServiceAddressRsp::GetServiceAddressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.GetServiceAddressRsp)
}

void GetServiceAddressRsp::InitAsDefaultInstance() {
  error_ = const_cast< ::eco::service::proto::Error*>(&::eco::service::proto::Error::default_instance());
}

GetServiceAddressRsp::GetServiceAddressRsp(const GetServiceAddressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.GetServiceAddressRsp)
}

void GetServiceAddressRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceAddressRsp::~GetServiceAddressRsp() {
  // @@protoc_insertion_point(destructor:eco.service.proto.GetServiceAddressRsp)
  SharedDtor();
}

void GetServiceAddressRsp::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetServiceAddressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceAddressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceAddressRsp_descriptor_;
}

const GetServiceAddressRsp& GetServiceAddressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

GetServiceAddressRsp* GetServiceAddressRsp::default_instance_ = NULL;

GetServiceAddressRsp* GetServiceAddressRsp::New() const {
  return new GetServiceAddressRsp;
}

void GetServiceAddressRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceAddressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.GetServiceAddressRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eco.service.proto.Error error = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_service_name;
        break;
      }

      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.GetServiceAddressRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.GetServiceAddressRsp)
  return false;
#undef DO_
}

void GetServiceAddressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.GetServiceAddressRsp)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.GetServiceAddressRsp)
}

::google::protobuf::uint8* GetServiceAddressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.GetServiceAddressRsp)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.GetServiceAddressRsp)
  return target;
}

int GetServiceAddressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eco.service.proto.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceAddressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceAddressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceAddressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceAddressRsp::MergeFrom(const GetServiceAddressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::eco::service::proto::Error::MergeFrom(from.error());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceAddressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceAddressRsp::CopyFrom(const GetServiceAddressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceAddressRsp::IsInitialized() const {

  return true;
}

void GetServiceAddressRsp::Swap(GetServiceAddressRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceAddressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceAddressRsp_descriptor_;
  metadata.reflection = GetServiceAddressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubServiceAddressReq::kServiceNameFieldNumber;
#endif  // !_MSC_VER

SubServiceAddressReq::SubServiceAddressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.SubServiceAddressReq)
}

void SubServiceAddressReq::InitAsDefaultInstance() {
}

SubServiceAddressReq::SubServiceAddressReq(const SubServiceAddressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.SubServiceAddressReq)
}

void SubServiceAddressReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubServiceAddressReq::~SubServiceAddressReq() {
  // @@protoc_insertion_point(destructor:eco.service.proto.SubServiceAddressReq)
  SharedDtor();
}

void SubServiceAddressReq::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void SubServiceAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubServiceAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubServiceAddressReq_descriptor_;
}

const SubServiceAddressReq& SubServiceAddressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

SubServiceAddressReq* SubServiceAddressReq::default_instance_ = NULL;

SubServiceAddressReq* SubServiceAddressReq::New() const {
  return new SubServiceAddressReq;
}

void SubServiceAddressReq::Clear() {
  if (has_service_name()) {
    if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      service_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubServiceAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.SubServiceAddressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.SubServiceAddressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.SubServiceAddressReq)
  return false;
#undef DO_
}

void SubServiceAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.SubServiceAddressReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.SubServiceAddressReq)
}

::google::protobuf::uint8* SubServiceAddressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.SubServiceAddressReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.SubServiceAddressReq)
  return target;
}

int SubServiceAddressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubServiceAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubServiceAddressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubServiceAddressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubServiceAddressReq::MergeFrom(const SubServiceAddressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubServiceAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubServiceAddressReq::CopyFrom(const SubServiceAddressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubServiceAddressReq::IsInitialized() const {

  return true;
}

void SubServiceAddressReq::Swap(SubServiceAddressReq* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubServiceAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubServiceAddressReq_descriptor_;
  metadata.reflection = SubServiceAddressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubServiceAddressRsp::kErrorFieldNumber;
const int SubServiceAddressRsp::kServiceNameFieldNumber;
#endif  // !_MSC_VER

SubServiceAddressRsp::SubServiceAddressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.SubServiceAddressRsp)
}

void SubServiceAddressRsp::InitAsDefaultInstance() {
  error_ = const_cast< ::eco::service::proto::Error*>(&::eco::service::proto::Error::default_instance());
}

SubServiceAddressRsp::SubServiceAddressRsp(const SubServiceAddressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.SubServiceAddressRsp)
}

void SubServiceAddressRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubServiceAddressRsp::~SubServiceAddressRsp() {
  // @@protoc_insertion_point(destructor:eco.service.proto.SubServiceAddressRsp)
  SharedDtor();
}

void SubServiceAddressRsp::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void SubServiceAddressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubServiceAddressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubServiceAddressRsp_descriptor_;
}

const SubServiceAddressRsp& SubServiceAddressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

SubServiceAddressRsp* SubServiceAddressRsp::default_instance_ = NULL;

SubServiceAddressRsp* SubServiceAddressRsp::New() const {
  return new SubServiceAddressRsp;
}

void SubServiceAddressRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubServiceAddressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.SubServiceAddressRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eco.service.proto.Error error = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_service_name;
        break;
      }

      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.SubServiceAddressRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.SubServiceAddressRsp)
  return false;
#undef DO_
}

void SubServiceAddressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.SubServiceAddressRsp)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.SubServiceAddressRsp)
}

::google::protobuf::uint8* SubServiceAddressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.SubServiceAddressRsp)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.SubServiceAddressRsp)
  return target;
}

int SubServiceAddressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eco.service.proto.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubServiceAddressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubServiceAddressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubServiceAddressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubServiceAddressRsp::MergeFrom(const SubServiceAddressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::eco::service::proto::Error::MergeFrom(from.error());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubServiceAddressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubServiceAddressRsp::CopyFrom(const SubServiceAddressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubServiceAddressRsp::IsInitialized() const {

  return true;
}

void SubServiceAddressRsp::Swap(SubServiceAddressRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubServiceAddressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubServiceAddressRsp_descriptor_;
  metadata.reflection = SubServiceAddressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PubServiceAddressReq::kServiceNameFieldNumber;
#endif  // !_MSC_VER

PubServiceAddressReq::PubServiceAddressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.PubServiceAddressReq)
}

void PubServiceAddressReq::InitAsDefaultInstance() {
}

PubServiceAddressReq::PubServiceAddressReq(const PubServiceAddressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.PubServiceAddressReq)
}

void PubServiceAddressReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubServiceAddressReq::~PubServiceAddressReq() {
  // @@protoc_insertion_point(destructor:eco.service.proto.PubServiceAddressReq)
  SharedDtor();
}

void PubServiceAddressReq::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void PubServiceAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubServiceAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubServiceAddressReq_descriptor_;
}

const PubServiceAddressReq& PubServiceAddressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

PubServiceAddressReq* PubServiceAddressReq::default_instance_ = NULL;

PubServiceAddressReq* PubServiceAddressReq::New() const {
  return new PubServiceAddressReq;
}

void PubServiceAddressReq::Clear() {
  if (has_service_name()) {
    if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      service_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubServiceAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.PubServiceAddressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.PubServiceAddressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.PubServiceAddressReq)
  return false;
#undef DO_
}

void PubServiceAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.PubServiceAddressReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.PubServiceAddressReq)
}

::google::protobuf::uint8* PubServiceAddressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.PubServiceAddressReq)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.PubServiceAddressReq)
  return target;
}

int PubServiceAddressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubServiceAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubServiceAddressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubServiceAddressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubServiceAddressReq::MergeFrom(const PubServiceAddressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubServiceAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubServiceAddressReq::CopyFrom(const PubServiceAddressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubServiceAddressReq::IsInitialized() const {

  return true;
}

void PubServiceAddressReq::Swap(PubServiceAddressReq* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubServiceAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubServiceAddressReq_descriptor_;
  metadata.reflection = PubServiceAddressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PubServiceAddressRsp::kErrorFieldNumber;
const int PubServiceAddressRsp::kServiceNameFieldNumber;
#endif  // !_MSC_VER

PubServiceAddressRsp::PubServiceAddressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.PubServiceAddressRsp)
}

void PubServiceAddressRsp::InitAsDefaultInstance() {
  error_ = const_cast< ::eco::service::proto::Error*>(&::eco::service::proto::Error::default_instance());
}

PubServiceAddressRsp::PubServiceAddressRsp(const PubServiceAddressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.PubServiceAddressRsp)
}

void PubServiceAddressRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubServiceAddressRsp::~PubServiceAddressRsp() {
  // @@protoc_insertion_point(destructor:eco.service.proto.PubServiceAddressRsp)
  SharedDtor();
}

void PubServiceAddressRsp::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void PubServiceAddressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubServiceAddressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubServiceAddressRsp_descriptor_;
}

const PubServiceAddressRsp& PubServiceAddressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

PubServiceAddressRsp* PubServiceAddressRsp::default_instance_ = NULL;

PubServiceAddressRsp* PubServiceAddressRsp::New() const {
  return new PubServiceAddressRsp;
}

void PubServiceAddressRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubServiceAddressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.PubServiceAddressRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eco.service.proto.Error error = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_service_name;
        break;
      }

      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.PubServiceAddressRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.PubServiceAddressRsp)
  return false;
#undef DO_
}

void PubServiceAddressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.PubServiceAddressRsp)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.PubServiceAddressRsp)
}

::google::protobuf::uint8* PubServiceAddressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.PubServiceAddressRsp)
  // optional .eco.service.proto.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.PubServiceAddressRsp)
  return target;
}

int PubServiceAddressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eco.service.proto.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubServiceAddressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubServiceAddressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubServiceAddressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubServiceAddressRsp::MergeFrom(const PubServiceAddressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::eco::service::proto::Error::MergeFrom(from.error());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubServiceAddressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubServiceAddressRsp::CopyFrom(const PubServiceAddressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubServiceAddressRsp::IsInitialized() const {

  return true;
}

void PubServiceAddressRsp::Swap(PubServiceAddressRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubServiceAddressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubServiceAddressRsp_descriptor_;
  metadata.reflection = PubServiceAddressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnPubServiceAddress::kServiceNameFieldNumber;
#endif  // !_MSC_VER

OnPubServiceAddress::OnPubServiceAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eco.service.proto.OnPubServiceAddress)
}

void OnPubServiceAddress::InitAsDefaultInstance() {
}

OnPubServiceAddress::OnPubServiceAddress(const OnPubServiceAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eco.service.proto.OnPubServiceAddress)
}

void OnPubServiceAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnPubServiceAddress::~OnPubServiceAddress() {
  // @@protoc_insertion_point(destructor:eco.service.proto.OnPubServiceAddress)
  SharedDtor();
}

void OnPubServiceAddress::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void OnPubServiceAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnPubServiceAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnPubServiceAddress_descriptor_;
}

const OnPubServiceAddress& OnPubServiceAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

OnPubServiceAddress* OnPubServiceAddress::default_instance_ = NULL;

OnPubServiceAddress* OnPubServiceAddress::New() const {
  return new OnPubServiceAddress;
}

void OnPubServiceAddress::Clear() {
  if (has_service_name()) {
    if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      service_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnPubServiceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eco.service.proto.OnPubServiceAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eco.service.proto.OnPubServiceAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eco.service.proto.OnPubServiceAddress)
  return false;
#undef DO_
}

void OnPubServiceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eco.service.proto.OnPubServiceAddress)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eco.service.proto.OnPubServiceAddress)
}

::google::protobuf::uint8* OnPubServiceAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eco.service.proto.OnPubServiceAddress)
  // optional string service_name = 10;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eco.service.proto.OnPubServiceAddress)
  return target;
}

int OnPubServiceAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 10;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnPubServiceAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnPubServiceAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnPubServiceAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnPubServiceAddress::MergeFrom(const OnPubServiceAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnPubServiceAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnPubServiceAddress::CopyFrom(const OnPubServiceAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPubServiceAddress::IsInitialized() const {

  return true;
}

void OnPubServiceAddress::Swap(OnPubServiceAddress* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnPubServiceAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnPubServiceAddress_descriptor_;
  metadata.reflection = OnPubServiceAddress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace service
}  // namespace eco

// @@protoc_insertion_point(global_scope)
