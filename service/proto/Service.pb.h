// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Service.proto

#ifndef PROTOBUF_Service_2eproto__INCLUDED
#define PROTOBUF_Service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Error.pb.h"
// @@protoc_insertion_point(includes)

namespace eco {
namespace service {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Service_2eproto();
void protobuf_AssignDesc_Service_2eproto();
void protobuf_ShutdownFile_Service_2eproto();

class GetServiceReq;
class Service;
class GetServiceAddressReq;
class GetServiceAddressRsp;
class SubServiceAddressReq;
class SubServiceAddressRsp;
class PubServiceAddressReq;
class PubServiceAddressRsp;
class OnPubServiceAddress;

// ===================================================================

class GetServiceReq : public ::google::protobuf::Message {
 public:
  GetServiceReq();
  virtual ~GetServiceReq();

  GetServiceReq(const GetServiceReq& from);

  inline GetServiceReq& operator=(const GetServiceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceReq& default_instance();

  void Swap(GetServiceReq* other);

  // implements Message ----------------------------------------------

  GetServiceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceReq& from);
  void MergeFrom(const GetServiceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.GetServiceReq)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static GetServiceReq* default_instance_;
};
// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  void Swap(Service* other);

  // implements Message ----------------------------------------------

  Service* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eco.service.proto.Error error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::eco::service::proto::Error& error() const;
  inline ::eco::service::proto::Error* mutable_error();
  inline ::eco::service::proto::Error* release_error();
  inline void set_allocated_error(::eco::service::proto::Error* error);

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // optional string process_name = 11;
  inline bool has_process_name() const;
  inline void clear_process_name();
  static const int kProcessNameFieldNumber = 11;
  inline const ::std::string& process_name() const;
  inline void set_process_name(const ::std::string& value);
  inline void set_process_name(const char* value);
  inline void set_process_name(const char* value, size_t size);
  inline ::std::string* mutable_process_name();
  inline ::std::string* release_process_name();
  inline void set_allocated_process_name(::std::string* process_name);

  // optional string did_protocol = 12;
  inline bool has_did_protocol() const;
  inline void clear_did_protocol();
  static const int kDidProtocolFieldNumber = 12;
  inline const ::std::string& did_protocol() const;
  inline void set_did_protocol(const ::std::string& value);
  inline void set_did_protocol(const char* value);
  inline void set_did_protocol(const char* value, size_t size);
  inline ::std::string* mutable_did_protocol();
  inline ::std::string* release_did_protocol();
  inline void set_allocated_did_protocol(::std::string* did_protocol);

  // optional string object_name = 13;
  inline bool has_object_name() const;
  inline void clear_object_name();
  static const int kObjectNameFieldNumber = 13;
  inline const ::std::string& object_name() const;
  inline void set_object_name(const ::std::string& value);
  inline void set_object_name(const char* value);
  inline void set_object_name(const char* value, size_t size);
  inline ::std::string* mutable_object_name();
  inline ::std::string* release_object_name();
  inline void set_allocated_object_name(::std::string* object_name);

  // optional int64 max_future_object_workload = 14;
  inline bool has_max_future_object_workload() const;
  inline void clear_max_future_object_workload();
  static const int kMaxFutureObjectWorkloadFieldNumber = 14;
  inline ::google::protobuf::int64 max_future_object_workload() const;
  inline void set_max_future_object_workload(::google::protobuf::int64 value);

  // optional int64 max_limited_object_workload = 15;
  inline bool has_max_limited_object_workload() const;
  inline void clear_max_limited_object_workload();
  static const int kMaxLimitedObjectWorkloadFieldNumber = 15;
  inline ::google::protobuf::int64 max_limited_object_workload() const;
  inline void set_max_limited_object_workload(::google::protobuf::int64 value);

  // optional int32 virtual_service_object_workload = 16;
  inline bool has_virtual_service_object_workload() const;
  inline void clear_virtual_service_object_workload();
  static const int kVirtualServiceObjectWorkloadFieldNumber = 16;
  inline ::google::protobuf::int32 virtual_service_object_workload() const;
  inline void set_virtual_service_object_workload(::google::protobuf::int32 value);

  // optional int32 horizontal_virtual_service_number = 17;
  inline bool has_horizontal_virtual_service_number() const;
  inline void clear_horizontal_virtual_service_number();
  static const int kHorizontalVirtualServiceNumberFieldNumber = 17;
  inline ::google::protobuf::int32 horizontal_virtual_service_number() const;
  inline void set_horizontal_virtual_service_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eco.service.proto.Service)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_process_name();
  inline void clear_has_process_name();
  inline void set_has_did_protocol();
  inline void clear_has_did_protocol();
  inline void set_has_object_name();
  inline void clear_has_object_name();
  inline void set_has_max_future_object_workload();
  inline void clear_has_max_future_object_workload();
  inline void set_has_max_limited_object_workload();
  inline void clear_has_max_limited_object_workload();
  inline void set_has_virtual_service_object_workload();
  inline void clear_has_virtual_service_object_workload();
  inline void set_has_horizontal_virtual_service_number();
  inline void clear_has_horizontal_virtual_service_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::eco::service::proto::Error* error_;
  ::std::string* service_name_;
  ::std::string* process_name_;
  ::std::string* did_protocol_;
  ::std::string* object_name_;
  ::google::protobuf::int64 max_future_object_workload_;
  ::google::protobuf::int64 max_limited_object_workload_;
  ::google::protobuf::int32 virtual_service_object_workload_;
  ::google::protobuf::int32 horizontal_virtual_service_number_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static Service* default_instance_;
};
// -------------------------------------------------------------------

class GetServiceAddressReq : public ::google::protobuf::Message {
 public:
  GetServiceAddressReq();
  virtual ~GetServiceAddressReq();

  GetServiceAddressReq(const GetServiceAddressReq& from);

  inline GetServiceAddressReq& operator=(const GetServiceAddressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceAddressReq& default_instance();

  void Swap(GetServiceAddressReq* other);

  // implements Message ----------------------------------------------

  GetServiceAddressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceAddressReq& from);
  void MergeFrom(const GetServiceAddressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.GetServiceAddressReq)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static GetServiceAddressReq* default_instance_;
};
// -------------------------------------------------------------------

class GetServiceAddressRsp : public ::google::protobuf::Message {
 public:
  GetServiceAddressRsp();
  virtual ~GetServiceAddressRsp();

  GetServiceAddressRsp(const GetServiceAddressRsp& from);

  inline GetServiceAddressRsp& operator=(const GetServiceAddressRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceAddressRsp& default_instance();

  void Swap(GetServiceAddressRsp* other);

  // implements Message ----------------------------------------------

  GetServiceAddressRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceAddressRsp& from);
  void MergeFrom(const GetServiceAddressRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eco.service.proto.Error error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::eco::service::proto::Error& error() const;
  inline ::eco::service::proto::Error* mutable_error();
  inline ::eco::service::proto::Error* release_error();
  inline void set_allocated_error(::eco::service::proto::Error* error);

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.GetServiceAddressRsp)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::eco::service::proto::Error* error_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static GetServiceAddressRsp* default_instance_;
};
// -------------------------------------------------------------------

class SubServiceAddressReq : public ::google::protobuf::Message {
 public:
  SubServiceAddressReq();
  virtual ~SubServiceAddressReq();

  SubServiceAddressReq(const SubServiceAddressReq& from);

  inline SubServiceAddressReq& operator=(const SubServiceAddressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubServiceAddressReq& default_instance();

  void Swap(SubServiceAddressReq* other);

  // implements Message ----------------------------------------------

  SubServiceAddressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubServiceAddressReq& from);
  void MergeFrom(const SubServiceAddressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.SubServiceAddressReq)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static SubServiceAddressReq* default_instance_;
};
// -------------------------------------------------------------------

class SubServiceAddressRsp : public ::google::protobuf::Message {
 public:
  SubServiceAddressRsp();
  virtual ~SubServiceAddressRsp();

  SubServiceAddressRsp(const SubServiceAddressRsp& from);

  inline SubServiceAddressRsp& operator=(const SubServiceAddressRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubServiceAddressRsp& default_instance();

  void Swap(SubServiceAddressRsp* other);

  // implements Message ----------------------------------------------

  SubServiceAddressRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubServiceAddressRsp& from);
  void MergeFrom(const SubServiceAddressRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eco.service.proto.Error error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::eco::service::proto::Error& error() const;
  inline ::eco::service::proto::Error* mutable_error();
  inline ::eco::service::proto::Error* release_error();
  inline void set_allocated_error(::eco::service::proto::Error* error);

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.SubServiceAddressRsp)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::eco::service::proto::Error* error_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static SubServiceAddressRsp* default_instance_;
};
// -------------------------------------------------------------------

class PubServiceAddressReq : public ::google::protobuf::Message {
 public:
  PubServiceAddressReq();
  virtual ~PubServiceAddressReq();

  PubServiceAddressReq(const PubServiceAddressReq& from);

  inline PubServiceAddressReq& operator=(const PubServiceAddressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PubServiceAddressReq& default_instance();

  void Swap(PubServiceAddressReq* other);

  // implements Message ----------------------------------------------

  PubServiceAddressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PubServiceAddressReq& from);
  void MergeFrom(const PubServiceAddressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.PubServiceAddressReq)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static PubServiceAddressReq* default_instance_;
};
// -------------------------------------------------------------------

class PubServiceAddressRsp : public ::google::protobuf::Message {
 public:
  PubServiceAddressRsp();
  virtual ~PubServiceAddressRsp();

  PubServiceAddressRsp(const PubServiceAddressRsp& from);

  inline PubServiceAddressRsp& operator=(const PubServiceAddressRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PubServiceAddressRsp& default_instance();

  void Swap(PubServiceAddressRsp* other);

  // implements Message ----------------------------------------------

  PubServiceAddressRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PubServiceAddressRsp& from);
  void MergeFrom(const PubServiceAddressRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eco.service.proto.Error error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::eco::service::proto::Error& error() const;
  inline ::eco::service::proto::Error* mutable_error();
  inline ::eco::service::proto::Error* release_error();
  inline void set_allocated_error(::eco::service::proto::Error* error);

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.PubServiceAddressRsp)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::eco::service::proto::Error* error_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static PubServiceAddressRsp* default_instance_;
};
// -------------------------------------------------------------------

class OnPubServiceAddress : public ::google::protobuf::Message {
 public:
  OnPubServiceAddress();
  virtual ~OnPubServiceAddress();

  OnPubServiceAddress(const OnPubServiceAddress& from);

  inline OnPubServiceAddress& operator=(const OnPubServiceAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnPubServiceAddress& default_instance();

  void Swap(OnPubServiceAddress* other);

  // implements Message ----------------------------------------------

  OnPubServiceAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnPubServiceAddress& from);
  void MergeFrom(const OnPubServiceAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 10;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 10;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:eco.service.proto.OnPubServiceAddress)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_Service_2eproto();
  friend void protobuf_AssignDesc_Service_2eproto();
  friend void protobuf_ShutdownFile_Service_2eproto();

  void InitAsDefaultInstance();
  static OnPubServiceAddress* default_instance_;
};
// ===================================================================


// ===================================================================

// GetServiceReq

// optional string service_name = 10;
inline bool GetServiceReq::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServiceReq::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServiceReq::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServiceReq::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& GetServiceReq::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.GetServiceReq.service_name)
  return *service_name_;
}
inline void GetServiceReq::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.GetServiceReq.service_name)
}
inline void GetServiceReq::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.GetServiceReq.service_name)
}
inline void GetServiceReq::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.GetServiceReq.service_name)
}
inline ::std::string* GetServiceReq::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.GetServiceReq.service_name)
  return service_name_;
}
inline ::std::string* GetServiceReq::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetServiceReq::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.GetServiceReq.service_name)
}

// -------------------------------------------------------------------

// Service

// optional .eco.service.proto.Error error = 2;
inline bool Service::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Service::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Service::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Service::clear_error() {
  if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
  clear_has_error();
}
inline const ::eco::service::proto::Error& Service::error() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::eco::service::proto::Error* Service::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::eco::service::proto::Error;
  // @@protoc_insertion_point(field_mutable:eco.service.proto.Service.error)
  return error_;
}
inline ::eco::service::proto::Error* Service::release_error() {
  clear_has_error();
  ::eco::service::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Service::set_allocated_error(::eco::service::proto::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.Service.error)
}

// optional string service_name = 10;
inline bool Service::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Service::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Service::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Service::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& Service::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.service_name)
  return *service_name_;
}
inline void Service::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.service_name)
}
inline void Service::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.Service.service_name)
}
inline void Service::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.Service.service_name)
}
inline ::std::string* Service::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.Service.service_name)
  return service_name_;
}
inline ::std::string* Service::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Service::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.Service.service_name)
}

// optional string process_name = 11;
inline bool Service::has_process_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Service::set_has_process_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Service::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Service::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& Service::process_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.process_name)
  return *process_name_;
}
inline void Service::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.process_name)
}
inline void Service::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.Service.process_name)
}
inline void Service::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.Service.process_name)
}
inline ::std::string* Service::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.Service.process_name)
  return process_name_;
}
inline ::std::string* Service::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Service::set_allocated_process_name(::std::string* process_name) {
  if (process_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_name_;
  }
  if (process_name) {
    set_has_process_name();
    process_name_ = process_name;
  } else {
    clear_has_process_name();
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.Service.process_name)
}

// optional string did_protocol = 12;
inline bool Service::has_did_protocol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Service::set_has_did_protocol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Service::clear_has_did_protocol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Service::clear_did_protocol() {
  if (did_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_protocol_->clear();
  }
  clear_has_did_protocol();
}
inline const ::std::string& Service::did_protocol() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.did_protocol)
  return *did_protocol_;
}
inline void Service::set_did_protocol(const ::std::string& value) {
  set_has_did_protocol();
  if (did_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_protocol_ = new ::std::string;
  }
  did_protocol_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.did_protocol)
}
inline void Service::set_did_protocol(const char* value) {
  set_has_did_protocol();
  if (did_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_protocol_ = new ::std::string;
  }
  did_protocol_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.Service.did_protocol)
}
inline void Service::set_did_protocol(const char* value, size_t size) {
  set_has_did_protocol();
  if (did_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_protocol_ = new ::std::string;
  }
  did_protocol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.Service.did_protocol)
}
inline ::std::string* Service::mutable_did_protocol() {
  set_has_did_protocol();
  if (did_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_protocol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.Service.did_protocol)
  return did_protocol_;
}
inline ::std::string* Service::release_did_protocol() {
  clear_has_did_protocol();
  if (did_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = did_protocol_;
    did_protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Service::set_allocated_did_protocol(::std::string* did_protocol) {
  if (did_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete did_protocol_;
  }
  if (did_protocol) {
    set_has_did_protocol();
    did_protocol_ = did_protocol;
  } else {
    clear_has_did_protocol();
    did_protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.Service.did_protocol)
}

// optional string object_name = 13;
inline bool Service::has_object_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Service::set_has_object_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Service::clear_has_object_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Service::clear_object_name() {
  if (object_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    object_name_->clear();
  }
  clear_has_object_name();
}
inline const ::std::string& Service::object_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.object_name)
  return *object_name_;
}
inline void Service::set_object_name(const ::std::string& value) {
  set_has_object_name();
  if (object_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    object_name_ = new ::std::string;
  }
  object_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.object_name)
}
inline void Service::set_object_name(const char* value) {
  set_has_object_name();
  if (object_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    object_name_ = new ::std::string;
  }
  object_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.Service.object_name)
}
inline void Service::set_object_name(const char* value, size_t size) {
  set_has_object_name();
  if (object_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    object_name_ = new ::std::string;
  }
  object_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.Service.object_name)
}
inline ::std::string* Service::mutable_object_name() {
  set_has_object_name();
  if (object_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    object_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.Service.object_name)
  return object_name_;
}
inline ::std::string* Service::release_object_name() {
  clear_has_object_name();
  if (object_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = object_name_;
    object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Service::set_allocated_object_name(::std::string* object_name) {
  if (object_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete object_name_;
  }
  if (object_name) {
    set_has_object_name();
    object_name_ = object_name;
  } else {
    clear_has_object_name();
    object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.Service.object_name)
}

// optional int64 max_future_object_workload = 14;
inline bool Service::has_max_future_object_workload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Service::set_has_max_future_object_workload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Service::clear_has_max_future_object_workload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Service::clear_max_future_object_workload() {
  max_future_object_workload_ = GOOGLE_LONGLONG(0);
  clear_has_max_future_object_workload();
}
inline ::google::protobuf::int64 Service::max_future_object_workload() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.max_future_object_workload)
  return max_future_object_workload_;
}
inline void Service::set_max_future_object_workload(::google::protobuf::int64 value) {
  set_has_max_future_object_workload();
  max_future_object_workload_ = value;
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.max_future_object_workload)
}

// optional int64 max_limited_object_workload = 15;
inline bool Service::has_max_limited_object_workload() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Service::set_has_max_limited_object_workload() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Service::clear_has_max_limited_object_workload() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Service::clear_max_limited_object_workload() {
  max_limited_object_workload_ = GOOGLE_LONGLONG(0);
  clear_has_max_limited_object_workload();
}
inline ::google::protobuf::int64 Service::max_limited_object_workload() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.max_limited_object_workload)
  return max_limited_object_workload_;
}
inline void Service::set_max_limited_object_workload(::google::protobuf::int64 value) {
  set_has_max_limited_object_workload();
  max_limited_object_workload_ = value;
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.max_limited_object_workload)
}

// optional int32 virtual_service_object_workload = 16;
inline bool Service::has_virtual_service_object_workload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Service::set_has_virtual_service_object_workload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Service::clear_has_virtual_service_object_workload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Service::clear_virtual_service_object_workload() {
  virtual_service_object_workload_ = 0;
  clear_has_virtual_service_object_workload();
}
inline ::google::protobuf::int32 Service::virtual_service_object_workload() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.virtual_service_object_workload)
  return virtual_service_object_workload_;
}
inline void Service::set_virtual_service_object_workload(::google::protobuf::int32 value) {
  set_has_virtual_service_object_workload();
  virtual_service_object_workload_ = value;
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.virtual_service_object_workload)
}

// optional int32 horizontal_virtual_service_number = 17;
inline bool Service::has_horizontal_virtual_service_number() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Service::set_has_horizontal_virtual_service_number() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Service::clear_has_horizontal_virtual_service_number() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Service::clear_horizontal_virtual_service_number() {
  horizontal_virtual_service_number_ = 0;
  clear_has_horizontal_virtual_service_number();
}
inline ::google::protobuf::int32 Service::horizontal_virtual_service_number() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.Service.horizontal_virtual_service_number)
  return horizontal_virtual_service_number_;
}
inline void Service::set_horizontal_virtual_service_number(::google::protobuf::int32 value) {
  set_has_horizontal_virtual_service_number();
  horizontal_virtual_service_number_ = value;
  // @@protoc_insertion_point(field_set:eco.service.proto.Service.horizontal_virtual_service_number)
}

// -------------------------------------------------------------------

// GetServiceAddressReq

// optional string service_name = 10;
inline bool GetServiceAddressReq::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServiceAddressReq::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServiceAddressReq::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServiceAddressReq::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& GetServiceAddressReq::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.GetServiceAddressReq.service_name)
  return *service_name_;
}
inline void GetServiceAddressReq::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.GetServiceAddressReq.service_name)
}
inline void GetServiceAddressReq::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.GetServiceAddressReq.service_name)
}
inline void GetServiceAddressReq::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.GetServiceAddressReq.service_name)
}
inline ::std::string* GetServiceAddressReq::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.GetServiceAddressReq.service_name)
  return service_name_;
}
inline ::std::string* GetServiceAddressReq::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetServiceAddressReq::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.GetServiceAddressReq.service_name)
}

// -------------------------------------------------------------------

// GetServiceAddressRsp

// optional .eco.service.proto.Error error = 2;
inline bool GetServiceAddressRsp::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServiceAddressRsp::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServiceAddressRsp::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServiceAddressRsp::clear_error() {
  if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
  clear_has_error();
}
inline const ::eco::service::proto::Error& GetServiceAddressRsp::error() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.GetServiceAddressRsp.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::eco::service::proto::Error* GetServiceAddressRsp::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::eco::service::proto::Error;
  // @@protoc_insertion_point(field_mutable:eco.service.proto.GetServiceAddressRsp.error)
  return error_;
}
inline ::eco::service::proto::Error* GetServiceAddressRsp::release_error() {
  clear_has_error();
  ::eco::service::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void GetServiceAddressRsp::set_allocated_error(::eco::service::proto::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.GetServiceAddressRsp.error)
}

// optional string service_name = 10;
inline bool GetServiceAddressRsp::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetServiceAddressRsp::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetServiceAddressRsp::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetServiceAddressRsp::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& GetServiceAddressRsp::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.GetServiceAddressRsp.service_name)
  return *service_name_;
}
inline void GetServiceAddressRsp::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.GetServiceAddressRsp.service_name)
}
inline void GetServiceAddressRsp::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.GetServiceAddressRsp.service_name)
}
inline void GetServiceAddressRsp::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.GetServiceAddressRsp.service_name)
}
inline ::std::string* GetServiceAddressRsp::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.GetServiceAddressRsp.service_name)
  return service_name_;
}
inline ::std::string* GetServiceAddressRsp::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetServiceAddressRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.GetServiceAddressRsp.service_name)
}

// -------------------------------------------------------------------

// SubServiceAddressReq

// optional string service_name = 10;
inline bool SubServiceAddressReq::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubServiceAddressReq::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubServiceAddressReq::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubServiceAddressReq::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& SubServiceAddressReq::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.SubServiceAddressReq.service_name)
  return *service_name_;
}
inline void SubServiceAddressReq::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.SubServiceAddressReq.service_name)
}
inline void SubServiceAddressReq::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.SubServiceAddressReq.service_name)
}
inline void SubServiceAddressReq::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.SubServiceAddressReq.service_name)
}
inline ::std::string* SubServiceAddressReq::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.SubServiceAddressReq.service_name)
  return service_name_;
}
inline ::std::string* SubServiceAddressReq::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubServiceAddressReq::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.SubServiceAddressReq.service_name)
}

// -------------------------------------------------------------------

// SubServiceAddressRsp

// optional .eco.service.proto.Error error = 2;
inline bool SubServiceAddressRsp::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubServiceAddressRsp::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubServiceAddressRsp::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubServiceAddressRsp::clear_error() {
  if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
  clear_has_error();
}
inline const ::eco::service::proto::Error& SubServiceAddressRsp::error() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.SubServiceAddressRsp.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::eco::service::proto::Error* SubServiceAddressRsp::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::eco::service::proto::Error;
  // @@protoc_insertion_point(field_mutable:eco.service.proto.SubServiceAddressRsp.error)
  return error_;
}
inline ::eco::service::proto::Error* SubServiceAddressRsp::release_error() {
  clear_has_error();
  ::eco::service::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SubServiceAddressRsp::set_allocated_error(::eco::service::proto::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.SubServiceAddressRsp.error)
}

// optional string service_name = 10;
inline bool SubServiceAddressRsp::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubServiceAddressRsp::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubServiceAddressRsp::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubServiceAddressRsp::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& SubServiceAddressRsp::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.SubServiceAddressRsp.service_name)
  return *service_name_;
}
inline void SubServiceAddressRsp::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.SubServiceAddressRsp.service_name)
}
inline void SubServiceAddressRsp::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.SubServiceAddressRsp.service_name)
}
inline void SubServiceAddressRsp::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.SubServiceAddressRsp.service_name)
}
inline ::std::string* SubServiceAddressRsp::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.SubServiceAddressRsp.service_name)
  return service_name_;
}
inline ::std::string* SubServiceAddressRsp::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubServiceAddressRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.SubServiceAddressRsp.service_name)
}

// -------------------------------------------------------------------

// PubServiceAddressReq

// optional string service_name = 10;
inline bool PubServiceAddressReq::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PubServiceAddressReq::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PubServiceAddressReq::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PubServiceAddressReq::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& PubServiceAddressReq::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.PubServiceAddressReq.service_name)
  return *service_name_;
}
inline void PubServiceAddressReq::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.PubServiceAddressReq.service_name)
}
inline void PubServiceAddressReq::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.PubServiceAddressReq.service_name)
}
inline void PubServiceAddressReq::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.PubServiceAddressReq.service_name)
}
inline ::std::string* PubServiceAddressReq::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.PubServiceAddressReq.service_name)
  return service_name_;
}
inline ::std::string* PubServiceAddressReq::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PubServiceAddressReq::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.PubServiceAddressReq.service_name)
}

// -------------------------------------------------------------------

// PubServiceAddressRsp

// optional .eco.service.proto.Error error = 2;
inline bool PubServiceAddressRsp::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PubServiceAddressRsp::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PubServiceAddressRsp::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PubServiceAddressRsp::clear_error() {
  if (error_ != NULL) error_->::eco::service::proto::Error::Clear();
  clear_has_error();
}
inline const ::eco::service::proto::Error& PubServiceAddressRsp::error() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.PubServiceAddressRsp.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::eco::service::proto::Error* PubServiceAddressRsp::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::eco::service::proto::Error;
  // @@protoc_insertion_point(field_mutable:eco.service.proto.PubServiceAddressRsp.error)
  return error_;
}
inline ::eco::service::proto::Error* PubServiceAddressRsp::release_error() {
  clear_has_error();
  ::eco::service::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void PubServiceAddressRsp::set_allocated_error(::eco::service::proto::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.PubServiceAddressRsp.error)
}

// optional string service_name = 10;
inline bool PubServiceAddressRsp::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PubServiceAddressRsp::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PubServiceAddressRsp::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PubServiceAddressRsp::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& PubServiceAddressRsp::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.PubServiceAddressRsp.service_name)
  return *service_name_;
}
inline void PubServiceAddressRsp::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.PubServiceAddressRsp.service_name)
}
inline void PubServiceAddressRsp::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.PubServiceAddressRsp.service_name)
}
inline void PubServiceAddressRsp::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.PubServiceAddressRsp.service_name)
}
inline ::std::string* PubServiceAddressRsp::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.PubServiceAddressRsp.service_name)
  return service_name_;
}
inline ::std::string* PubServiceAddressRsp::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PubServiceAddressRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.PubServiceAddressRsp.service_name)
}

// -------------------------------------------------------------------

// OnPubServiceAddress

// optional string service_name = 10;
inline bool OnPubServiceAddress::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnPubServiceAddress::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnPubServiceAddress::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnPubServiceAddress::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& OnPubServiceAddress::service_name() const {
  // @@protoc_insertion_point(field_get:eco.service.proto.OnPubServiceAddress.service_name)
  return *service_name_;
}
inline void OnPubServiceAddress::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:eco.service.proto.OnPubServiceAddress.service_name)
}
inline void OnPubServiceAddress::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:eco.service.proto.OnPubServiceAddress.service_name)
}
inline void OnPubServiceAddress::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eco.service.proto.OnPubServiceAddress.service_name)
}
inline ::std::string* OnPubServiceAddress::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:eco.service.proto.OnPubServiceAddress.service_name)
  return service_name_;
}
inline ::std::string* OnPubServiceAddress::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OnPubServiceAddress::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:eco.service.proto.OnPubServiceAddress.service_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace service
}  // namespace eco

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Service_2eproto__INCLUDED
